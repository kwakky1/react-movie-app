{"version":3,"sources":["Movie.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["Movie","props","className","src","poster","alt","title","year","summary","slice","genres","map","index","App","useState","isLoading","setIsLoading","movies","setMovies","useEffect","getMovie","a","axios","get","then","res","data","console","log","catch","error","alert","movie","medium_cover_image","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSAsBeA,G,MAnBD,SAAEC,GAEZ,OACI,sBAAKC,UAAU,QAAf,UACI,qBAAKC,IAAKF,EAAMG,OAAQC,IAAKJ,EAAMK,QACnC,sBAAKJ,UAAU,cAAf,UACI,oBAAIA,UAAU,eAAd,SAA8BD,EAAMK,QACpC,oBAAIJ,UAAU,cAAd,SAA6BD,EAAMM,OACnC,+BAAKN,EAAMO,QAAQC,MAAM,EAAG,KAA5B,SACA,oBAAIP,UAAU,gBAAd,SACCD,EAAMS,OAAOC,KAAK,SAACD,EAAeE,GAC/B,OAAO,oBAAIV,UAAU,gBAAd,SAA2CQ,GAARE,gB,MCkD/CC,MAlDf,WAAgB,IAAD,EAEsBC,oBAAkB,GAFxC,mBAELC,EAFK,KAEMC,EAFN,OAGgBF,mBAAqB,IAHrC,mBAGLG,EAHK,KAGGC,EAHH,KAKXC,qBAAW,WACPC,MACF,IAEF,IAAMA,EAAQ,uCAAG,sBAAAC,EAAA,sEACPC,IAAMC,IAAN,yDACDC,MAAK,SAAAC,GACFP,EAAUO,EAAIC,KAAKA,KAAKT,QACxBU,QAAQC,IAAIH,EAAIC,KAAKA,KAAKT,QAC1BD,GAAa,MAEhBa,OAAO,SAAAC,GACJC,MAAM,oGAAD,OAA0BD,OAR1B,2CAAH,qDAYhB,OACI,8BACI,yBAAS5B,UAAU,YAAnB,SACI,qBAAKA,UAAU,SAAf,SACKa,EACG,8BACI,sBAAMb,UAAU,eAAhB,0BAGJ,qBAAKA,UAAU,SAAf,SACMe,EAAON,KAAI,SAACqB,GACV,OAAO,cAAC,EAAD,CACOzB,KAAMyB,EAAMzB,KACZD,MAAO0B,EAAM1B,MACbE,QAASwB,EAAMxB,QACfJ,OAAQ4B,EAAMC,mBACdvB,OAAQsB,EAAMtB,QALTsB,EAAME,gBClCxCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1e4de0bf.chunk.js","sourcesContent":["import React from 'react';\nimport './Movie.css'\n\nconst Movie = ( props : { year:number, title:string, poster:string, summary:string, genres:[string] }) => {\n\n    return (\n        <div className=\"movie\">\n            <img src={props.poster} alt={props.title}/>\n            <div className=\"movie__data\">\n                <h3 className=\"movie__title\">{props.title}</h3>\n                <h5 className=\"movie__year\">{props.year}</h5>\n                <h3>{props.summary.slice(0, 180)}...</h3>\n                <ul className=\"movie__genres\">\n                {props.genres.map( (genres:string, index:number) => {\n                    return <li className=\"genres__genre\" key={index}>{genres}</li>\n                })}\n                </ul>\n            </div>\n        </div>\n    );\n};\n\nexport default Movie;","import {useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./App.css\"\n\ninterface MovieProps {\n    id: number,\n    year: number,\n    title: string,\n    summary: string,\n    medium_cover_image: string\n    genres : [string]\n}\n\nfunction App() {\n\n    const[isLoading, setIsLoading] = useState<boolean>(true);\n    const[movies, setMovies] = useState<Array<any>>([]);\n\n    useEffect( () => {\n        getMovie() ;\n    },[])\n\n    const getMovie = async ():Promise<void> => {\n        await axios.get(`https://yts.mx/api/v2/list_movies.json?sort_by=rating`)\n            .then(res =>{\n                setMovies(res.data.data.movies);\n                console.log(res.data.data.movies);\n                setIsLoading(false);\n            })\n            .catch( error => {\n                alert(`아래와 같은 오류가 발생하였습니다.\\n ${error}`);\n            })\n    }\n\n  return (\n      <div>\n          <section className=\"container\">\n              <div className=\"loader\">\n                  {isLoading ? (\n                      <div>\n                          <span className=\"loader__text\">Loading...</span>\n                      </div>\n                  ) : (\n                      <div className=\"movies\">\n                          { movies.map((movie: MovieProps) => {\n                              return <Movie key={movie.id}\n                                            year={movie.year}\n                                            title={movie.title}\n                                            summary={movie.summary}\n                                            poster={movie.medium_cover_image}\n                                            genres={movie.genres}/>\n                          })}\n                      </div>\n\n                    )\n                  }\n              </div>\n          </section>\n      </div>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}